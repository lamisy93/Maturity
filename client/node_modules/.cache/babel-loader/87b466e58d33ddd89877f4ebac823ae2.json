{"ast":null,"code":"import _regeneratorRuntime from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aminata/Downloads/BACK-FRONT/client/src/components/Form/Form.js\";\nimport React, { Component, Fragment } from 'react'; // import update from 'react-addons-update';\n\nimport Quiz from './questionForm/Quiz';\nimport Result from './questionForm/Result'; // import ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nimport './Form.scss';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n    _this.callApi =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var featuresTeam, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"/api/v1/campaign/displayQuestions\");\n\n            case 2:\n              featuresTeam = _context.sent;\n              _context.next = 5;\n              return featuresTeam.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(featuresTeam.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.setNextQuestion = function () {\n      var counter = _this.state.counter + 1;\n      var questionId = _this.state.questionId + 1;\n\n      if (!_this.state.quizQuestions[counter]) {\n        _this.setState({\n          quizFinish: true\n        });\n      } else {\n        _this.setState({\n          counter: counter,\n          questionId: questionId,\n          question: _this.state.quizQuestions[counter].wordingques,\n          wordingcat: _this.state.quizQuestions[counter].wordingcat,\n          url: _this.state.quizQuestions[counter].url,\n          answerOptions: _this.state.quizQuestions[counter].answers,\n          answer: ''\n        });\n      }\n    };\n\n    _this.state = {\n      counter: 0,\n      quizQuestions: [],\n      questionId: 1,\n      question: '',\n      wordingcat: '',\n      url: '',\n      answer: '',\n      result: '',\n      quizFinish: false\n    };\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"comment\",\n    value: function comment() {\n      console.log(\"test\");\n      return React.createElement(\"div\", {\n        style: {\n          \"width\": \"500px\",\n          \"height\": \"500px\",\n          \"backgroundColor\": \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.callApi().then(function (quizQuestions) {\n        // quizQuestions.map((question) =>{/*console.log(question) this.shuffleArray(question.answers)*/ ques});\n        _this2.setState({\n          quizQuestions: quizQuestions,\n          question: quizQuestions[0].wordingques,\n          url: quizQuestions[0].url,\n          wordingcat: quizQuestions[0].wordingcat\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      var _this$state = this.state,\n          answer = _this$state.answer,\n          questionId = _this$state.questionId,\n          question = _this$state.question,\n          wordingcat = _this$state.wordingcat,\n          quizQuestions = _this$state.quizQuestions,\n          url = _this$state.url;\n      return React.createElement(Quiz, {\n        answer: answer,\n        questionId: questionId,\n        question: question,\n        wordingcat: wordingcat,\n        url: url,\n        comment: this.comment,\n        questionTotal: quizQuestions.length,\n        changeQuestion: this.setNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.quizFinish ? this.renderResult() : this.renderQuiz(), React.createElement(\"button\", {\n        className: \"question-form-button\",\n        onClick: this.setNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"VALIDER\"));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport default Form;","map":{"version":3,"sources":["/home/aminata/Downloads/BACK-FRONT/client/src/components/Form/Form.js"],"names":["React","Component","Fragment","Quiz","Result","Form","props","callApi","fetch","featuresTeam","json","body","status","Error","message","setNextQuestion","counter","state","questionId","quizQuestions","setState","quizFinish","question","wordingques","wordingcat","url","answerOptions","answers","answer","result","console","log","then","catch","err","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","comment","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n// import update from 'react-addons-update';\r\nimport Quiz from './questionForm/Quiz';\r\nimport Result from './questionForm/Result';\r\n// import ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport './Form.scss';\r\n\r\nclass Form extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      quizQuestions : [],\r\n      questionId: 1,\r\n      question: '',\r\n      wordingcat: '',\r\n      url: '',\r\n      answer: '',\r\n      result: '',\r\n      quizFinish: false\r\n    };\r\n\r\n  }\r\n\r\n  comment(){\r\n    console.log(\"test\")\r\n    return(\r\n      <div style={{\"width\": \"500px\", \"height\": \"500px\", \"backgroundColor\": \"red\"}}></div>\r\n    )\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.callApi()\r\n      .then(quizQuestions => {\r\n\r\n      // quizQuestions.map((question) =>{/*console.log(question) this.shuffleArray(question.answers)*/ ques});\r\n\r\n        this.setState({quizQuestions,\r\n          question: quizQuestions[0].wordingques,\r\n          url: quizQuestions[0].url,\r\n          wordingcat: quizQuestions[0].wordingcat\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n     \r\n    }\r\n    \r\n    callApi = async () => {\r\n      const featuresTeam = await fetch(\"/api/v1/campaign/displayQuestions\");\r\n      const body = await featuresTeam.json();\r\n  \r\n      if (featuresTeam.status !== 200) throw Error(body.message);\r\n\r\n      return body;\r\n    };\r\n\r\n    shuffleArray(array) {\r\n      let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n      while (0 !== currentIndex) {\r\n\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n\r\n    return array;\r\n  };\r\n\r\n  setNextQuestion = () => {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    if (!this.state.quizQuestions[counter]) {\r\n      this.setState({\r\n          quizFinish: true\r\n      })\r\n    } \r\n    else{\r\n      this.setState({\r\n        counter: counter,\r\n        questionId: questionId,\r\n        question: this.state.quizQuestions[counter].wordingques,\r\n        wordingcat: this.state.quizQuestions[counter].wordingcat,\r\n        url: this.state.quizQuestions[counter].url,\r\n        answerOptions: this.state.quizQuestions[counter].answers,\r\n        answer: ''\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  renderQuiz() {\r\n    const {answer, questionId, question, wordingcat, quizQuestions, url} = this.state;\r\n    return (\r\n      <Quiz\r\n        answer={answer}\r\n        questionId={questionId}\r\n        question={question}\r\n        wordingcat={wordingcat}\r\n        url={url}\r\n        comment={this.comment}\r\n        questionTotal={quizQuestions.length}\r\n        changeQuestion={this.setNextQuestion}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return (\r\n      <Result quizResult={this.state.result} />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.state.quizFinish ? this.renderResult() : this.renderQuiz()}\r\n        {/* <textarea style={{\"marginTop\": \"50px\"}}></textarea> */}\r\n        <button className=\"question-form-button\" onClick={this.setNextQuestion}>\r\n            VALIDER\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}