{"ast":null,"code":"import _regeneratorRuntime from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aminata/Downloads/BACK-FRONT/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aminata/Downloads/BACK-FRONT/client/src/components/Form/Form.js\";\nimport React, { Component } from 'react'; // import update from 'react-addons-update';\n// import quizQuestions from './api/quizQuestions';\n// import Quiz from './questionForm/Quiz';\n// import Result from './questionForm/Result';\n\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './Form.scss';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form() {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this));\n    _this.callApi =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var questions, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/v1/campaign/displayQuestions');\n\n            case 2:\n              questions = _context.sent;\n              _context.next = 5;\n              return questions.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(questions.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      questions: [] // counter: 0,\n      // questionId: 1,\n      // question: '',\n      // answerOptions: [],\n      // answer: '',\n      // answersCount: {\n      //   Oui: 0,\n      //   Non: 0,\n      // }\n\n    }; // this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n\n    return _this;\n  } // componentWillMount() {\n  //   const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\n  //   this.setState({\n  //     question: quizQuestions[0].question,\n  //     answerOptions: shuffledAnswerOptions[0]\n  //   });\n  // }\n\n\n  _createClass(Form, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.callApi().then(function (questions) {\n        _this2.setState({\n          questions: questions\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    // shuffleArray(array) {\n    //   let currentIndex = array.length, temporaryValue, randomIndex;\n    //   // While there remain elements to shuffle...\n    //   while (0 !== currentIndex) {\n    //     // Pick a remaining element...\n    //     randomIndex = Math.floor(Math.random() * currentIndex);\n    //     currentIndex -= 1;\n    //     // And swap it with the current element.\n    //     temporaryValue = array[currentIndex];\n    //     array[currentIndex] = array[randomIndex];\n    //     array[randomIndex] = temporaryValue;\n    //   }\n    //   return array;\n    // };\n    // handleAnswerSelected(event) {\n    //   this.setUserAnswer(event.currentTarget.value);\n    //   if (this.state.questionId < quizQuestions.length) {\n    //       setTimeout(() => this.setNextQuestion(), 300);\n    //   } else {\n    //       setTimeout(() => this.setResults(this.getResults()), 300);\n    //   }\n    // }\n    // setUserAnswer(answer) {\n    //   const updatedAnswersCount = update(this.state.answersCount, {\n    //     [answer]: {$apply: (currentValue) => currentValue + 1}\n    //   });\n    //   this.setState({\n    //       answersCount: updatedAnswersCount,\n    //       answer: answer\n    //   });\n    // }\n    // setNextQuestion() {\n    //   const counter = this.state.counter + 1;\n    //   const questionId = this.state.questionId + 1;\n    //   this.setState({\n    //       counter: counter,\n    //       questionId: questionId,\n    //       question: quizQuestions[counter].question,\n    //       answerOptions: quizQuestions[counter].answers,\n    //       answer: ''\n    //   });\n    // }\n    // getResults() {\n    //   const answersCount = this.state.answersCount;\n    //   const answersCountKeys = Object.keys(answersCount);\n    //   const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    //   const maxAnswerCount = Math.max.apply(null, answersCountValues);\n    //   return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n    // }\n    // setResults(result) {\n    //   if (result.length === 1) {\n    //     this.setState({ result: result[0] });\n    //   } else {\n    //     this.setState({ result: 'Undetermined' });\n    //   }\n    // }\n    // renderQuiz() {\n    //   return (\n    //     <Quiz\n    //       answer={this.state.answer}\n    //       answerOptions={this.state.answerOptions}\n    //       questionId={this.state.questionId}\n    //       question={this.state.question}\n    //       questionTotal={quizQuestions.length}\n    //       onAnswerSelected={this.handleAnswerSelected}\n    //     />\n    //   );\n    // }\n    // renderResult() {\n    //   return (\n    //     <Result quizResult={this.state.result} />\n    //   );\n    // }\n    value: function render() {\n      return React.createElement(ReactCSSTransitionGroup, {\n        className: \"question-form\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.state.questions.map(function (question, i) {\n        return React.createElement(\"div\", {\n          className: \"question-form-card\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, question.wordingcat), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: question.url,\n          target: \"new\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, question.wordingques)));\n      }));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport { Form as default };","map":{"version":3,"sources":["/home/aminata/Downloads/BACK-FRONT/client/src/components/Form/Form.js"],"names":["React","Component","ReactCSSTransitionGroup","Form","callApi","fetch","questions","json","body","status","Error","message","state","then","setState","catch","err","console","log","map","question","i","wordingcat","url","wordingques"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AACA;AACA;;AACA,OAAOC,uBAAP,MAAoC,mCAApC;AACA,OAAO,aAAP;;IAEqBC,I;;;;;AACnB,kBAAc;AAAA;;AAAA;;AACZ;AADY,UAkCdC,OAlCc;AAAA;AAAA;AAAA;AAAA,6BAkCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACgBC,KAAK,CAAC,mCAAD,CADrB;;AAAA;AACFC,cAAAA,SADE;AAAA;AAAA,qBAEWA,SAAS,CAACC,IAAV,EAFX;;AAAA;AAEFC,cAAAA,IAFE;;AAAA,oBAIJF,SAAS,CAACG,MAAV,KAAqB,GAJjB;AAAA;AAAA;AAAA;;AAAA,oBAI4BC,KAAK,CAACF,IAAI,CAACG,OAAN,CAJjC;;AAAA;AAAA,+CAMDH,IANC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlCI;AAEZ,UAAKI,KAAL,GAAa;AACXN,MAAAA,SAAS,EAAE,EADA,CAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAVW,KAAb,CAFY,CAeZ;;AAfY;AAgBb,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;;wCAEoB;AAAA;;AAClB,WAAKF,OAAL,GACGS,IADH,CACQ,UAAAP,SAAS,EAAI;AACjB,QAAA,MAAI,CAACQ,QAAL,CAAc;AAAER,UAAAA,SAAS,EAATA;AAAF,SAAd;AACD,OAHH,EAIGS,KAJH,CAIS,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAJZ;AAKD;;;AAaD;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;6BACS;AACP,aACE,oBAAC,uBAAD;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,SAAS,EAAC,KAFZ;AAGE,QAAA,cAAc,EAAC,MAHjB;AAIE,QAAA,sBAAsB,EAAE,GAJ1B;AAKE,QAAA,sBAAsB,EAAE,GAL1B;AAME,QAAA,gBAAgB,MANlB;AAOE,QAAA,uBAAuB,EAAE,GAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUG,KAAKJ,KAAL,CAAWN,SAAX,CAAqBa,GAArB,CAAyB,UAACC,QAAD,EAAWC,CAAX;AAAA,eACxB;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAoC,UAAA,GAAG,EAAEA,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,QAAQ,CAACE,UAAd,CADA,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAG;AAAG,UAAA,IAAI,EAAEF,QAAQ,CAACG,GAAlB;AAAuB,UAAA,MAAM,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqCH,QAAQ,CAACI,WAA9C,CAAH,CAFJ,CADwB;AAAA,OAAzB,CAVH,CADF;AAqBD;;;;EA5J+BvB,S;;SAAbE,I","sourcesContent":["import React, { Component } from 'react';\r\n// import update from 'react-addons-update';\r\n// import quizQuestions from './api/quizQuestions';\r\n// import Quiz from './questionForm/Quiz';\r\n// import Result from './questionForm/Result';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport './Form.scss';\r\n\r\nexport default class Form extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      questions: []\r\n      // counter: 0,\r\n      // questionId: 1,\r\n      // question: '',\r\n      // answerOptions: [],\r\n      // answer: '',\r\n      // answersCount: {\r\n      //   Oui: 0,\r\n      //   Non: 0,\r\n      // }\r\n    };\r\n\r\n    // this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n  }\r\n\r\n  // componentWillMount() {\r\n  //   const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\r\n  //   this.setState({\r\n  //     question: quizQuestions[0].question,\r\n  //     answerOptions: shuffledAnswerOptions[0]\r\n  //   });\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this.callApi()\r\n      .then(questions => {\r\n        this.setState({ questions });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  callApi = async () => {\r\n    const questions = await fetch('/api/v1/campaign/displayQuestions');\r\n    const body = await questions.json();\r\n    \r\n    if (questions.status !== 200) throw Error(body.message);\r\n    \r\n    return body;\r\n  };\r\n\r\n\r\n\r\n  // shuffleArray(array) {\r\n  //   let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  //   // While there remain elements to shuffle...\r\n  //   while (0 !== currentIndex) {\r\n\r\n  //     // Pick a remaining element...\r\n  //     randomIndex = Math.floor(Math.random() * currentIndex);\r\n  //     currentIndex -= 1;\r\n\r\n  //     // And swap it with the current element.\r\n  //     temporaryValue = array[currentIndex];\r\n  //     array[currentIndex] = array[randomIndex];\r\n  //     array[randomIndex] = temporaryValue;\r\n  //   }\r\n\r\n  //   return array;\r\n  // };\r\n\r\n  // handleAnswerSelected(event) {\r\n  //   this.setUserAnswer(event.currentTarget.value);\r\n\r\n  //   if (this.state.questionId < quizQuestions.length) {\r\n  //       setTimeout(() => this.setNextQuestion(), 300);\r\n  //   } else {\r\n  //       setTimeout(() => this.setResults(this.getResults()), 300);\r\n  //   }\r\n  // }\r\n\r\n  // setUserAnswer(answer) {\r\n  //   const updatedAnswersCount = update(this.state.answersCount, {\r\n  //     [answer]: {$apply: (currentValue) => currentValue + 1}\r\n  //   });\r\n\r\n  //   this.setState({\r\n  //       answersCount: updatedAnswersCount,\r\n  //       answer: answer\r\n  //   });\r\n  // }\r\n\r\n  // setNextQuestion() {\r\n  //   const counter = this.state.counter + 1;\r\n  //   const questionId = this.state.questionId + 1;\r\n\r\n  //   this.setState({\r\n  //       counter: counter,\r\n  //       questionId: questionId,\r\n  //       question: quizQuestions[counter].question,\r\n  //       answerOptions: quizQuestions[counter].answers,\r\n  //       answer: ''\r\n  //   });\r\n  // }\r\n\r\n  // getResults() {\r\n  //   const answersCount = this.state.answersCount;\r\n  //   const answersCountKeys = Object.keys(answersCount);\r\n  //   const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\r\n  //   const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n\r\n  //   return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\r\n  // }\r\n\r\n  // setResults(result) {\r\n  //   if (result.length === 1) {\r\n  //     this.setState({ result: result[0] });\r\n  //   } else {\r\n  //     this.setState({ result: 'Undetermined' });\r\n  //   }\r\n  // }\r\n\r\n  // renderQuiz() {\r\n  //   return (\r\n  //     <Quiz\r\n  //       answer={this.state.answer}\r\n  //       answerOptions={this.state.answerOptions}\r\n  //       questionId={this.state.questionId}\r\n  //       question={this.state.question}\r\n  //       questionTotal={quizQuestions.length}\r\n  //       onAnswerSelected={this.handleAnswerSelected}\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  // renderResult() {\r\n  //   return (\r\n  //     <Result quizResult={this.state.result} />\r\n  //   );\r\n  // }\r\n  render() {\r\n    return (\r\n      <ReactCSSTransitionGroup\r\n        className=\"question-form\"\r\n        component=\"div\"\r\n        transitionName=\"fade\"\r\n        transitionEnterTimeout={800}\r\n        transitionLeaveTimeout={500}\r\n        transitionAppear\r\n        transitionAppearTimeout={500}\r\n      >\r\n        {/* {this.state.result ? this.renderResult() : this.renderQuiz()} */}\r\n        {this.state.questions.map((question, i) => (\r\n          <div className=\"question-form-card\" key={i}>\r\n          <h2>{question.wordingcat}</h2>\r\n              <p><a href={question.url} target=\"new\">{question.wordingques}</a></p>\r\n          </div>\r\n      ))}\r\n        \r\n    </ReactCSSTransitionGroup>\r\n\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}